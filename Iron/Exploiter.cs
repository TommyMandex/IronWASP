using System;
using System.Collections.Generic;
using System.Text;

namespace IronWASP
{
    public class Exploiter
    {
        List<string> TruePayloads = new List<string>();
        List<Response> TrueResponses = new List<Response>();
        List<string> TrueResBodies = new List<string>();

        List<string> FalsePayloads = new List<string>();
        List<Response> FalseResponses = new List<Response>();
        List<string> FalseResBodies = new List<string>();

        bool WasBoolWorkingChecked = false;
        bool intIsBoolWorkeding = false;

        //string CharsList = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-=+\|[]{}'\";:/?.,<>!@#$%^&*()~`";

        //string AlphaNumChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        //string SymbolChars = " \r\n\t_-=+\\|[]{}'\";:/?.,<>!@#$%^&*()~`";

        public void AddTrueConditionValues(string Payload, Response Res)
        {
            TruePayloads.Add(Payload);
            TrueResponses.Add(Res);
            TrueResBodies.Add(NormalizeResponseBody(Payload, Res));
        }

        public void AddFalseConditionValues(string Payload, Response Res)
        {
            FalsePayloads.Add(Payload);
            FalseResponses.Add(Res);
            FalseResBodies.Add(NormalizeResponseBody(Payload, Res));
        }

        public bool IsBoolWorking()
        {
            if(!WasBoolWorkingChecked)
            {
                this.intIsBoolWorkeding = CheckBoolWorking();
            }
            return this.intIsBoolWorkeding;
        }

        bool CheckBoolWorking()
        {
            for(int i=1; i < FalseResponses.Count;i++)
            {
                if(FalseResponses[0].Code != FalseResponses[i].Code) return false;
                if(!FalseResBodies[0].Equals(FalseResBodies[i])) return false;
            }
            foreach(string ResStr in TrueResBodies)
            {
                if(ResStr.Equals(FalseResBodies[0])) return false;
            }
            return true;
        }

        public bool IsTrue(string Payload, Response Res)
        {
            if(Res.Code == FalseResponses[0].Code && NormalizeResponseBody(Payload, Res).Equals(FalseResBodies[0]))
            {
                return false;
            }
            else if(Res.Code == TrueResponses[0].Code)
            {
                return true;
            }
            return false;
        }

        public int FindNum(PayloadGenerator PayGenFunction, object Info, Fuzzer F)
        {
            int UpperLimit = 0;
            int LowerLimit = 1;

            string Payload = "";

            bool IsZero = false;
            bool IsOne = false;

            if(IsPayloadResponseTrue(F, PayGenFunction(Info, "=", "0")))
            {
                IsZero = true;
            }
            if(IsPayloadResponseTrue(F, PayGenFunction(Info, "=", "1")))
            {
                IsOne = true;
            }
            if (IsOne && IsZero)
            {
                throw new Exception("Injection does not work");
            }
            else if (IsOne)
            {
                return 1;
            }
            else if (IsZero)
            {
                return 0;
            }

            for(int i=0; i<100;i++)
            //while (true)
            {
                if (i == 20 || i == 40 || i == 60 || i == 80)
                {
                    if (IsPayloadResponseTrue(F, PayGenFunction(Info, "=", "0")))
                    {
                        throw new Exception("Injection does not work");
                    }
                }

                int ToCheck = 0;
                string Operator = "<";
                if (UpperLimit == 0)
                {
                    ToCheck = LowerLimit * 10;
                }
                else if (UpperLimit - LowerLimit == 1)
                {
                    Operator = "=";
                    ToCheck = LowerLimit;
                }
                else
                {
                    ToCheck = ((UpperLimit - LowerLimit) / 2) + LowerLimit;
                }
                Payload = PayGenFunction(Info, Operator, ToCheck.ToString());
                if (IsPayloadResponseTrue(F, Payload))
                {
                    if (Operator == "=")
                    {
                        return ToCheck;
                    }
                    else
                    {
                        UpperLimit = ToCheck;
                    }
                }
                else
                {
                    if (Operator == "=" && UpperLimit - LowerLimit == 1)
                    {
                        return -1;
                    }
                    else
                    {
                        LowerLimit = ToCheck;
                    }
                }
            }
            return -1;
        }

        /*
        void Main()
{
	Console.WriteLine(FindNum(1398));	
}

// Define other methods and classes here

public bool Check(string Operator, int ToCheck, int Num)
{
	Console.Write(string.Format("{0}{1}{2} - ", ToCheck, Operator, Num));
	if(Operator == "=")
	{
		return (ToCheck == Num);
	}
	else if	(Operator == ">")
	{
		return (ToCheck > Num);
	}
	else	
	{
		return (ToCheck < Num);
	}
}
public int FindNum(int Num)
{
  int UpperLimit = 0;
  int LowerLimit = 1;

  while (true)
  {
      int ToCheck = 0;
      string Operator = "<";
      if (UpperLimit == 0)
      {
          ToCheck = LowerLimit * 10;
      }
      else if (UpperLimit - LowerLimit == 1)
      {
          Operator = "=";
          ToCheck = UpperLimit;
      }
      else
      {
          ToCheck = ((UpperLimit - LowerLimit) / 2) + LowerLimit;
      }
	  Console.WriteLine(string.Format("Upper: {0}    Lower: {1}", UpperLimit, LowerLimit));
      if (Check(Operator, ToCheck, Num))
      {
          Console.WriteLine("true");
		  if (Operator == "=")
          {
              return ToCheck;
          }
          else
          {
              LowerLimit = ToCheck;
          }
      }
      else
      {
          Console.WriteLine("false");
		  if (Operator == "=" && UpperLimit - LowerLimit == 1)
          {
              return -1;
          }
          else
          {
              UpperLimit = ToCheck;
          }
      }
  }
}

         */

        public string FindChar(PayloadGenerator PayGenFunction, object Info, Fuzzer F, string Chars)
        {
            foreach (char C in Chars)
            {
                string Payload = PayGenFunction(Info, "=", C.ToString());
                if(IsPayloadResponseTrue(F, Payload))
                {
                    return C.ToString();
                }
            }
            return "�";
        }

        public string FindCharByCode(PayloadGenerator PayGenFunction, object Info, Fuzzer F)
        {
            int CharCode = FindNum(PayGenFunction, Info, F);
            if (CharCode == -1)
            {
                return "";
            }
            else
            {
                try
                {
                    return Convert.ToChar(CharCode).ToString();
                }
                catch
                {
                    return "";
                }
            }
        }

        bool IsPayloadResponseTrue(Fuzzer F, string Payload)
        {
            Response Res = F.Inject(Payload);
            return IsTrue(Payload, Res);
        }

        public delegate string PayloadGenerator(object Info, string Operator, string Value);

        string NormalizeResponseBody(string Payload, Response Res)
        {
            return Res.BodyString.Replace(Payload, "").Replace(Tools.UrlEncode(Payload), "").Replace(Tools.HtmlEncode(Payload), "");
        }

    }
}
